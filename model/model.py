# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17GljA8xUqhUyjtP30pxSMkbyNAp20hvd
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import joblib  # For saving the best model

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from xgboost import XGBClassifier
from lightgbm import LGBMClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report, confusion_matrix

# Load Preprocessed Dataset
file_path = "/content/preprocessed_diabetes_dataset (1).csv"  # Change this if needed
df = pd.read_csv(file_path)

# Splitting Data into Features (X) and Target (y)
X = df.drop(columns=["diabetes"])
y = df["diabetes"]

# Splitting into Training and Testing Sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Standardizing the Features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Define ML Models (without SVM)
models = {
    "XGBoost": XGBClassifier(use_label_encoder=False, eval_metric="logloss"),
    "LightGBM": LGBMClassifier(),
    "Weighted Logistic": LogisticRegression(class_weight="balanced"),
    "Logistic Regression": LogisticRegression(),
    "Decision Tree": DecisionTreeClassifier(),
    "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
    "Gradient Boosting": GradientBoostingClassifier(n_estimators=100, random_state=42),
    "KNN": KNeighborsClassifier(n_neighbors=5),
    "Naive Bayes": GaussianNB(),
}

# Training and Evaluating Models
model_results = {}

for name, model in models.items():
    print(f"Training {name}...")
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)

    model_results[name] = {"Accuracy": accuracy, "Precision": precision, "Recall": recall, "F1-Score": f1}

    # Print classification report
    print(f"\n{name} - Classification Report:")
    print(classification_report(y_test, y_pred))

    # Plot confusion matrix
    cm = confusion_matrix(y_test, y_pred)
    plt.figure(figsize=(6, 5))
    sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["No Diabetes", "Diabetes"], yticklabels=["No Diabetes", "Diabetes"])

    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    plt.title(f"Confusion Matrix - {name}")
    plt.show()

    print("=" * 50)

# Convert results to DataFrame for easier plotting
results_df = pd.DataFrame(model_results).T

# Identify Best Model Based on F1-Score
best_model_name = results_df["F1-Score"].idxmax()
best_model = models[best_model_name]

# Print Best Model
print(f"Best Model: {best_model_name} with F1-Score: {results_df.loc[best_model_name, 'F1-Score']:.4f}")

# Save the Best Model
joblib.dump(best_model, "best_diabetes_prediction_model.pkl")
print("Best model saved successfully!")

# Plot Model Accuracies
plt.figure(figsize=(10, 5))
sns.barplot(x=results_df.index, y=results_df["Accuracy"], palette="viridis")
plt.xticks(rotation=45)
plt.xlabel("Models")
plt.ylabel("Accuracy")
plt.title("Model Performance Comparison (Accuracy)")
plt.show()

# Plot Precision vs. F1-Score
plt.figure(figsize=(10, 5))
results_df[["Precision", "F1-Score"]].plot(kind="bar", figsize=(10, 5), colormap="coolwarm")
plt.xticks(rotation=45)
plt.xlabel("Models")
plt.ylabel("Score")
plt.title("Model Performance Comparison (Precision vs. F1-Score)")
plt.legend(loc="lower right")
plt.show()